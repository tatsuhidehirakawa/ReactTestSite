version: "3"
services:

  110wbs_dev:
    container_name: 110wbs_dev
    build: ./110wbs_dev
    volumes:
      - ../s_01_src/110wbs_src:/usr/src/app
      - wbs-vol:/usr/src/app
    working_dir: /usr/src/app
    environment:
      - CHOKIDAR_USEPOLLING=true # Hot-reload
    ports:
      - "3000:3000"
    tty: true
    stdin_open: true
    networks:
      - STGprd_devpkg_dev_network
    # platform: linux/x86_64

  124api_dev:
    container_name: 124api_dev
    build:
      context: ../s_01_src/124api_src/src
      dockerfile: ../../../s_03_dev/124api_dev/Dockerfile
    # build: ./124api_dev
    # environment:
    #   - DATABASE_HOST=${DATABASE_HOST}
    #   - DB_PORT=${PORT}
    #   - USER=${USER}
    #   - PGSQL_PW=${PGSQL_PW}
    #   - SSLMODE=${SSLMODE}
    env_file: ../dev.env
    tty: true
    volumes:
      - ../s_01_src/124api_src/src:/go/src # Activate for ShellScript Operation.
      - api-vol:/go/src # Activate for Dockerfile Opration.
    ports:
      - "8080:8080"
      # Port No of Host(non-overlapable):Port No of Container(overlappable)
    networks:
      - STGprd_devpkg_dev_network
    depends_on:
      - 134dbs_dev

  125gql_dev:
    container_name: 125gql_dev
    build:
      context: ../s_01_src/125gql_src/src
      dockerfile: ../../../s_03_dev/125gql_dev/Dockerfile
    # build: ./125gql_dev
    # environment:
    #   - DATABASE_HOST=${DATABASE_HOST}
    #   - DB_PORT=${PORT}
    #   - USER=${USER}
    #   - PGSQL_PW=${PGSQL_PW}
    #   - SSLMODE=${SSLMODE}
    env_file: ../dev.env
    tty: true
    volumes:
      - ../s_01_src/125gql_src/src:/go/src # Activate for ShellScript Operation.
      - api-vol:/go/src # Activate for Dockerfile Opration.
    ports:
      - "8080:8080"
      # Port No of Host(non-overlapable):Port No of Container(overlappable)
    networks:
      - STGprd_devpkg_dev_network
    depends_on:
      - 134dbs_dev

  134dbs_dev:
    container_name: 134dbs_dev
    image: postgres:14
    # build: ./134dbs_dev
    command: -c 'config_file=/etc/postgresql/postgresql.conf'
    ports:
      - 5432:5432
    volumes:
      - dbs-vol:/var/lib/postgresql/data
      - ../s_01_src/134dbs_src/initdb:/docker-entrypoint-initdb.d
      - ../s_01_src/134dbs_src/config/postgresql.conf:/etc/postgresql/postgresql.conf
      # This directory is for generate test data from db dump and restore.
      # Warning : Do not operate PowerShell at dump and restore.
      - ../s_05_tst/130dbs_tst/:/usr/src/dbstore
    environment:
        POSTGRES_PASSWORD: ${PGSQL_PW}
    networks:
      - STGprd_devpkg_dev_network
  
  135adm_dev:
    container_name: 135adm_dev
    image: dpage/pgadmin4
    volumes:
      - adm-vol:/var/lib/pgadmin
      # - ./pgadmin:/var/lib/pgadmin
# - ./pgadmin:/var/lib/pgadmin/storage 
    ports:
      - "5439:80"
      - "443:443"
    environment:
       PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
       PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    networks:
      - STGprd_devpkg_dev_network

volumes:
  wbs-vol:
  api-vol:
  dbs-vol:
  adm-vol:   # For pgAdmin.

networks:
  STGprd_devpkg_dev_network:
    driver: bridge

#---note---+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+----#
# db-storeが生成されるような行為を行うときには「.sql」ファイルを
# 格納していないと初期化処理がスキップされるので注意！

# Dockerfile：コンテナ自体の初期設定のみ(動作に必要なツールのインストールと設定変更)記載
# docker-compose.yml：環境依存情報のみ(ポートとかストレージとか、プログラムの起動コマンドとか)記載
