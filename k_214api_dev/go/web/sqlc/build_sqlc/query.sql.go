// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: query.sql

package build_sqlc

import (
	"context"
	"database/sql"
	"time"
)

const createAccount_attribute = `-- name: CreateAccount_attribute :execresult
INSERT INTO account_attribute (
  account_id, self_introduction, twitter_url, facebook_url, instagram_url, youtube_channel, update_date, update_id, pic_id_01, pic_id_02, pic_id_03, skill
) VALUES (
  ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?
)
`

type CreateAccount_attributeParams struct {
	AccountID        string         `json:"account_id"`
	SelfIntroduction sql.NullString `json:"self_introduction"`
	TwitterUrl       sql.NullString `json:"twitter_url"`
	FacebookUrl      sql.NullString `json:"facebook_url"`
	InstagramUrl     sql.NullString `json:"instagram_url"`
	YoutubeChannel   sql.NullString `json:"youtube_channel"`
	UpdateDate       time.Time      `json:"update_date"`
	UpdateID         string         `json:"update_id"`
	PicID01          string         `json:"pic_id_01"`
	PicID02          sql.NullString `json:"pic_id_02"`
	PicID03          sql.NullString `json:"pic_id_03"`
	Skill            string         `json:"skill"`
}

// account_id, self_introduction, twitter_url, facebook_url, instagram_url, youtube_channel, update_date, update_id, pic_id_01, pic_id_02, pic_id_03, skill
func (q *Queries) CreateAccount_attribute(ctx context.Context, arg CreateAccount_attributeParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createAccount_attribute,
		arg.AccountID,
		arg.SelfIntroduction,
		arg.TwitterUrl,
		arg.FacebookUrl,
		arg.InstagramUrl,
		arg.YoutubeChannel,
		arg.UpdateDate,
		arg.UpdateID,
		arg.PicID01,
		arg.PicID02,
		arg.PicID03,
		arg.Skill,
	)
}

const createAccount_master = `-- name: CreateAccount_master :execresult
INSERT INTO account_master (
  user_id, account_name, mail_addless, password, zip_code, barth_date, time_zone, language, status, registration_date, rate
) VALUES (
  ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?
)
`

type CreateAccount_masterParams struct {
	UserID           int32          `json:"user_id"`
	AccountName      string         `json:"account_name"`
	MailAddless      string         `json:"mail_addless"`
	Password         string         `json:"password"`
	ZipCode          string         `json:"zip_code"`
	BarthDate        time.Time      `json:"barth_date"`
	TimeZone         string         `json:"time_zone"`
	Language         string         `json:"language"`
	Status           string         `json:"status"`
	RegistrationDate time.Time      `json:"registration_date"`
	Rate             sql.NullString `json:"rate"`
}

// user_id, account_name, mail_addless, password, zip_code, barth_date, time_zone, language, status, registration_date, rate
func (q *Queries) CreateAccount_master(ctx context.Context, arg CreateAccount_masterParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createAccount_master,
		arg.UserID,
		arg.AccountName,
		arg.MailAddless,
		arg.Password,
		arg.ZipCode,
		arg.BarthDate,
		arg.TimeZone,
		arg.Language,
		arg.Status,
		arg.RegistrationDate,
		arg.Rate,
	)
}

const deleteAccount_attribute = `-- name: DeleteAccount_attribute :exec
DELETE FROM account_attribute
WHERE account_id = ?
`

func (q *Queries) DeleteAccount_attribute(ctx context.Context, accountID string) error {
	_, err := q.db.ExecContext(ctx, deleteAccount_attribute, accountID)
	return err
}

const deleteAccount_master = `-- name: DeleteAccount_master :exec
DELETE FROM account_master
WHERE user_id = ?
`

func (q *Queries) DeleteAccount_master(ctx context.Context, userID int32) error {
	_, err := q.db.ExecContext(ctx, deleteAccount_master, userID)
	return err
}

const getAccount_attribute = `-- name: GetAccount_attribute :one
SELECT account_id, self_introduction, twitter_url, facebook_url, instagram_url, youtube_channel, update_date, update_id, pic_id_01, pic_id_02, pic_id_03, skill FROM account_attribute
WHERE account_id = ? LIMIT 1
`

func (q *Queries) GetAccount_attribute(ctx context.Context, accountID string) (AccountAttribute, error) {
	row := q.db.QueryRowContext(ctx, getAccount_attribute, accountID)
	var i AccountAttribute
	err := row.Scan(
		&i.AccountID,
		&i.SelfIntroduction,
		&i.TwitterUrl,
		&i.FacebookUrl,
		&i.InstagramUrl,
		&i.YoutubeChannel,
		&i.UpdateDate,
		&i.UpdateID,
		&i.PicID01,
		&i.PicID02,
		&i.PicID03,
		&i.Skill,
	)
	return i, err
}

const getAccount_master = `-- name: GetAccount_master :one
SELECT user_id, account_name, mail_addless, password, zip_code, barth_date, time_zone, language, status, registration_date, rate FROM account_master
WHERE user_id = ? LIMIT 1
`

func (q *Queries) GetAccount_master(ctx context.Context, userID int32) (AccountMaster, error) {
	row := q.db.QueryRowContext(ctx, getAccount_master, userID)
	var i AccountMaster
	err := row.Scan(
		&i.UserID,
		&i.AccountName,
		&i.MailAddless,
		&i.Password,
		&i.ZipCode,
		&i.BarthDate,
		&i.TimeZone,
		&i.Language,
		&i.Status,
		&i.RegistrationDate,
		&i.Rate,
	)
	return i, err
}

const listAccount_attribute = `-- name: ListAccount_attribute :many
SELECT account_id, self_introduction, twitter_url, facebook_url, instagram_url, youtube_channel, update_date, update_id, pic_id_01, pic_id_02, pic_id_03, skill FROM account_attribute
ORDER BY account_id
`

func (q *Queries) ListAccount_attribute(ctx context.Context) ([]AccountAttribute, error) {
	rows, err := q.db.QueryContext(ctx, listAccount_attribute)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AccountAttribute
	for rows.Next() {
		var i AccountAttribute
		if err := rows.Scan(
			&i.AccountID,
			&i.SelfIntroduction,
			&i.TwitterUrl,
			&i.FacebookUrl,
			&i.InstagramUrl,
			&i.YoutubeChannel,
			&i.UpdateDate,
			&i.UpdateID,
			&i.PicID01,
			&i.PicID02,
			&i.PicID03,
			&i.Skill,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAccount_master = `-- name: ListAccount_master :many
SELECT user_id, account_name, mail_addless, password, zip_code, barth_date, time_zone, language, status, registration_date, rate FROM account_master
ORDER BY user_id
`

func (q *Queries) ListAccount_master(ctx context.Context) ([]AccountMaster, error) {
	rows, err := q.db.QueryContext(ctx, listAccount_master)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AccountMaster
	for rows.Next() {
		var i AccountMaster
		if err := rows.Scan(
			&i.UserID,
			&i.AccountName,
			&i.MailAddless,
			&i.Password,
			&i.ZipCode,
			&i.BarthDate,
			&i.TimeZone,
			&i.Language,
			&i.Status,
			&i.RegistrationDate,
			&i.Rate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
